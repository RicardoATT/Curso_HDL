
Hola_CIC.elf:     file format elf32-littlenios2
Hola_CIC.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000004d0 memsz 0x000004d0 flags r-x
    LOAD off    0x000014f0 vaddr 0x000014f0 paddr 0x000014f4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014f8 vaddr 0x000014f8 paddr 0x000014f8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000014f4  2**0
                  CONTENTS
  2 .text         000004b8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000014d8  000014d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000014f0  000014f4  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000014f8  000014f8  000014f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001504  00001504  000014f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000010b1  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008fb  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000ab3  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000254  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000082e  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000714  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005d5e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00005d61  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005d6d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005d6e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00005d6f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005d73  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00005d77  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00005d7b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00005d86  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00005d91  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00005d9c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000047  00000000  00000000  00005da5  2**0
                  CONTENTS, READONLY
 29 .jdi          000052f7  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000381e6  00000000  00000000  0000b0e3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000014d8 l    d  .rodata	00000000 .rodata
000014f0 l    d  .rwdata	00000000 .rwdata
000014f8 l    d  .bss	00000000 .bss
00001504 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Hola_CIC_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00001188 g     F .text	0000002c alt_main
000014f4 g       *ABS*	00000000 __flash_rwdata_start
000011b4 g     F .text	00000038 alt_putstr
000012d8 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000014fc g     O .bss	00000004 alt_argv
000094f0 g       *ABS*	00000000 _gp
000011ec g     F .text	00000004 usleep
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000013f4 g     F .text	00000064 .hidden __udivsi3
00001504 g       *ABS*	00000000 __bss_end
000012d0 g     F .text	00000004 alt_dcache_flush_all
000014f4 g       *ABS*	00000000 __ram_rwdata_end
000014f0 g       *ABS*	00000000 __ram_rodata_end
000014f0 g     O .rwdata	00000004 jtag_uart_0
00001458 g     F .text	00000058 .hidden __umodsi3
00001504 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001214 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
00001210 g     F .text	00000004 alt_sys_init
000014b0 g     F .text	00000028 .hidden __mulsi3
000014f0 g       *ABS*	00000000 __ram_rwdata_start
000014d8 g       *ABS*	00000000 __ram_rodata_start
00001248 g     F .text	00000088 alt_busy_sleep
00001504 g       *ABS*	00000000 __alt_stack_base
000014f8 g       *ABS*	00000000 __bss_start
0000105c g     F .text	0000004c main
000014f8 g     O .bss	00000004 alt_envp
000012fc g     F .text	00000084 .hidden __divsi3
000014d8 g       *ABS*	00000000 __flash_rodata_start
000011f0 g     F .text	00000020 alt_irq_init
00001500 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000014f4 g       *ABS*	00000000 _edata
00001504 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001380 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000012e0 g     F .text	0000001c strlen
000012d4 g     F .text	00000004 alt_icache_flush_all
000010a8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a53c14 	ori	gp,gp,38128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10853e14 	ori	r2,r2,5368

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c54114 	ori	r3,r3,5380

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7b54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010a80 	call	10a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011880 	call	1188 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7b68>

0000105c <main>:
#include "system.h"
#include "unistd.h"

int main()
{ 
	alt_putstr("Hello from CIC IPN!\n");
    105c:	01000034 	movhi	r4,0
#include "io.h"
#include "system.h"
#include "unistd.h"

int main()
{ 
    1060:	defffd04 	addi	sp,sp,-12
	alt_putstr("Hello from CIC IPN!\n");
    1064:	21053604 	addi	r4,r4,5336
#include "io.h"
#include "system.h"
#include "unistd.h"

int main()
{ 
    1068:	dfc00215 	stw	ra,8(sp)
    106c:	dc400115 	stw	r17,4(sp)
    1070:	dc000015 	stw	r16,0(sp)
	alt_putstr("Hello from CIC IPN!\n");
    1074:	00011b40 	call	11b4 <alt_putstr>
	alt_u8 led_initial = 0x00 ;

	IOWR(PIO_0_BASE, 0, led_initial);
    1078:	008c0404 	movi	r2,12304
    107c:	10000035 	stwio	zero,0(r2)
#include "unistd.h"

int main()
{ 
	alt_putstr("Hello from CIC IPN!\n");
	alt_u8 led_initial = 0x00 ;
    1080:	0023883a 	mov	r17,zero

	IOWR(PIO_0_BASE, 0, led_initial);
	while (1){
		led_initial-=1;
		IOWR(PIO_0_BASE, 0, led_initial);
    1084:	1021883a 	mov	r16,r2
	alt_putstr("Hello from CIC IPN!\n");
	alt_u8 led_initial = 0x00 ;

	IOWR(PIO_0_BASE, 0, led_initial);
	while (1){
		led_initial-=1;
    1088:	88bfffc4 	addi	r2,r17,-1
    108c:	1023883a 	mov	r17,r2
		IOWR(PIO_0_BASE, 0, led_initial);
    1090:	10803fcc 	andi	r2,r2,255
    1094:	80800035 	stwio	r2,0(r16)
		usleep(1000000);
    1098:	010003f4 	movhi	r4,15
    109c:	21109004 	addi	r4,r4,16960
    10a0:	00011ec0 	call	11ec <usleep>
    10a4:	003ff806 	br	1088 <_gp+0xffff7b98>

000010a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10a8:	deffff04 	addi	sp,sp,-4
    10ac:	01000034 	movhi	r4,0
    10b0:	01400034 	movhi	r5,0
    10b4:	dfc00015 	stw	ra,0(sp)
    10b8:	21053c04 	addi	r4,r4,5360
    10bc:	29453d04 	addi	r5,r5,5364

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10c0:	2140061e 	bne	r4,r5,10dc <alt_load+0x34>
    10c4:	01000034 	movhi	r4,0
    10c8:	01400034 	movhi	r5,0
    10cc:	21040804 	addi	r4,r4,4128
    10d0:	29440804 	addi	r5,r5,4128
    10d4:	2140121e 	bne	r4,r5,1120 <alt_load+0x78>
    10d8:	00000b06 	br	1108 <alt_load+0x60>
    10dc:	00c00034 	movhi	r3,0
    10e0:	18c53d04 	addi	r3,r3,5364
    10e4:	1907c83a 	sub	r3,r3,r4
    10e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    10ec:	10fff526 	beq	r2,r3,10c4 <_gp+0xffff7bd4>
    {
      *to++ = *from++;
    10f0:	114f883a 	add	r7,r2,r5
    10f4:	39c00017 	ldw	r7,0(r7)
    10f8:	110d883a 	add	r6,r2,r4
    10fc:	10800104 	addi	r2,r2,4
    1100:	31c00015 	stw	r7,0(r6)
    1104:	003ff906 	br	10ec <_gp+0xffff7bfc>
    1108:	01000034 	movhi	r4,0
    110c:	01400034 	movhi	r5,0
    1110:	21053604 	addi	r4,r4,5336
    1114:	29453604 	addi	r5,r5,5336

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1118:	2140101e 	bne	r4,r5,115c <alt_load+0xb4>
    111c:	00000b06 	br	114c <alt_load+0xa4>
    1120:	00c00034 	movhi	r3,0
    1124:	18c40804 	addi	r3,r3,4128
    1128:	1907c83a 	sub	r3,r3,r4
    112c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1130:	10fff526 	beq	r2,r3,1108 <_gp+0xffff7c18>
    {
      *to++ = *from++;
    1134:	114f883a 	add	r7,r2,r5
    1138:	39c00017 	ldw	r7,0(r7)
    113c:	110d883a 	add	r6,r2,r4
    1140:	10800104 	addi	r2,r2,4
    1144:	31c00015 	stw	r7,0(r6)
    1148:	003ff906 	br	1130 <_gp+0xffff7c40>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    114c:	00012d00 	call	12d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1150:	dfc00017 	ldw	ra,0(sp)
    1154:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1158:	00012d41 	jmpi	12d4 <alt_icache_flush_all>
    115c:	00c00034 	movhi	r3,0
    1160:	18c53c04 	addi	r3,r3,5360
    1164:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1168:	0005883a 	mov	r2,zero
  {
    while( to != end )
    116c:	18bff726 	beq	r3,r2,114c <_gp+0xffff7c5c>
    {
      *to++ = *from++;
    1170:	114f883a 	add	r7,r2,r5
    1174:	39c00017 	ldw	r7,0(r7)
    1178:	110d883a 	add	r6,r2,r4
    117c:	10800104 	addi	r2,r2,4
    1180:	31c00015 	stw	r7,0(r6)
    1184:	003ff906 	br	116c <_gp+0xffff7c7c>

00001188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    118c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1194:	00011f00 	call	11f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1198:	00012100 	call	1210 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    119c:	d1a00217 	ldw	r6,-32760(gp)
    11a0:	d1600317 	ldw	r5,-32756(gp)
    11a4:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    11a8:	dfc00017 	ldw	ra,0(sp)
    11ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11b0:	000105c1 	jmpi	105c <main>

000011b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    11b4:	defffe04 	addi	sp,sp,-8
    11b8:	dc000015 	stw	r16,0(sp)
    11bc:	dfc00115 	stw	ra,4(sp)
    11c0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11c4:	00012e00 	call	12e0 <strlen>
    11c8:	01000034 	movhi	r4,0
    11cc:	000f883a 	mov	r7,zero
    11d0:	100d883a 	mov	r6,r2
    11d4:	800b883a 	mov	r5,r16
    11d8:	21053c04 	addi	r4,r4,5360
#else
    return fputs(str, stdout);
#endif
#endif
}
    11dc:	dfc00117 	ldw	ra,4(sp)
    11e0:	dc000017 	ldw	r16,0(sp)
    11e4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11e8:	00012141 	jmpi	1214 <altera_avalon_jtag_uart_write>

000011ec <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    11ec:	00012481 	jmpi	1248 <alt_busy_sleep>

000011f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    11f8:	00012d80 	call	12d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11fc:	00800044 	movi	r2,1
    1200:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1204:	dfc00017 	ldw	ra,0(sp)
    1208:	dec00104 	addi	sp,sp,4
    120c:	f800283a 	ret

00001210 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1210:	f800283a 	ret

00001214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1214:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1218:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    121c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1220:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1224:	2980072e 	bgeu	r5,r6,1244 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1228:	38c00037 	ldwio	r3,0(r7)
    122c:	18ffffec 	andhi	r3,r3,65535
    1230:	183ffc26 	beq	r3,zero,1224 <_gp+0xffff7d34>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1234:	28c00007 	ldb	r3,0(r5)
    1238:	20c00035 	stwio	r3,0(r4)
    123c:	29400044 	addi	r5,r5,1
    1240:	003ff806 	br	1224 <_gp+0xffff7d34>

  return count;
}
    1244:	f800283a 	ret

00001248 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1248:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    124c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1250:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1254:	dc000015 	stw	r16,0(sp)
    1258:	dfc00115 	stw	ra,4(sp)
    125c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1260:	00013f40 	call	13f4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1264:	10001026 	beq	r2,zero,12a8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1268:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    126c:	013999b4 	movhi	r4,58982
    1270:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1274:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1278:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    127c:	297fffc4 	addi	r5,r5,-1
    1280:	283ffe1e 	bne	r5,zero,127c <_gp+0xffff7d8c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1284:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1288:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    128c:	18bffb16 	blt	r3,r2,127c <_gp+0xffff7d8c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1290:	01400144 	movi	r5,5
    1294:	8009883a 	mov	r4,r16
    1298:	00014b00 	call	14b0 <__mulsi3>
    129c:	10bfffc4 	addi	r2,r2,-1
    12a0:	103ffe1e 	bne	r2,zero,129c <_gp+0xffff7dac>
    12a4:	00000506 	br	12bc <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    12a8:	01400144 	movi	r5,5
    12ac:	8009883a 	mov	r4,r16
    12b0:	00014b00 	call	14b0 <__mulsi3>
    12b4:	10bfffc4 	addi	r2,r2,-1
    12b8:	00bffe16 	blt	zero,r2,12b4 <_gp+0xffff7dc4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    12bc:	0005883a 	mov	r2,zero
    12c0:	dfc00117 	ldw	ra,4(sp)
    12c4:	dc000017 	ldw	r16,0(sp)
    12c8:	dec00204 	addi	sp,sp,8
    12cc:	f800283a 	ret

000012d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    12d0:	f800283a 	ret

000012d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    12d4:	f800283a 	ret

000012d8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    12d8:	000170fa 	wrctl	ienable,zero
    12dc:	f800283a 	ret

000012e0 <strlen>:
    12e0:	2005883a 	mov	r2,r4
    12e4:	10c00007 	ldb	r3,0(r2)
    12e8:	18000226 	beq	r3,zero,12f4 <strlen+0x14>
    12ec:	10800044 	addi	r2,r2,1
    12f0:	003ffc06 	br	12e4 <_gp+0xffff7df4>
    12f4:	1105c83a 	sub	r2,r2,r4
    12f8:	f800283a 	ret

000012fc <__divsi3>:
    12fc:	20001b16 	blt	r4,zero,136c <__divsi3+0x70>
    1300:	000f883a 	mov	r7,zero
    1304:	28001616 	blt	r5,zero,1360 <__divsi3+0x64>
    1308:	200d883a 	mov	r6,r4
    130c:	29001a2e 	bgeu	r5,r4,1378 <__divsi3+0x7c>
    1310:	00800804 	movi	r2,32
    1314:	00c00044 	movi	r3,1
    1318:	00000106 	br	1320 <__divsi3+0x24>
    131c:	10000d26 	beq	r2,zero,1354 <__divsi3+0x58>
    1320:	294b883a 	add	r5,r5,r5
    1324:	10bfffc4 	addi	r2,r2,-1
    1328:	18c7883a 	add	r3,r3,r3
    132c:	293ffb36 	bltu	r5,r4,131c <_gp+0xffff7e2c>
    1330:	0005883a 	mov	r2,zero
    1334:	18000726 	beq	r3,zero,1354 <__divsi3+0x58>
    1338:	0005883a 	mov	r2,zero
    133c:	31400236 	bltu	r6,r5,1348 <__divsi3+0x4c>
    1340:	314dc83a 	sub	r6,r6,r5
    1344:	10c4b03a 	or	r2,r2,r3
    1348:	1806d07a 	srli	r3,r3,1
    134c:	280ad07a 	srli	r5,r5,1
    1350:	183ffa1e 	bne	r3,zero,133c <_gp+0xffff7e4c>
    1354:	38000126 	beq	r7,zero,135c <__divsi3+0x60>
    1358:	0085c83a 	sub	r2,zero,r2
    135c:	f800283a 	ret
    1360:	014bc83a 	sub	r5,zero,r5
    1364:	39c0005c 	xori	r7,r7,1
    1368:	003fe706 	br	1308 <_gp+0xffff7e18>
    136c:	0109c83a 	sub	r4,zero,r4
    1370:	01c00044 	movi	r7,1
    1374:	003fe306 	br	1304 <_gp+0xffff7e14>
    1378:	00c00044 	movi	r3,1
    137c:	003fee06 	br	1338 <_gp+0xffff7e48>

00001380 <__modsi3>:
    1380:	20001716 	blt	r4,zero,13e0 <__modsi3+0x60>
    1384:	000f883a 	mov	r7,zero
    1388:	2005883a 	mov	r2,r4
    138c:	28001216 	blt	r5,zero,13d8 <__modsi3+0x58>
    1390:	2900162e 	bgeu	r5,r4,13ec <__modsi3+0x6c>
    1394:	01800804 	movi	r6,32
    1398:	00c00044 	movi	r3,1
    139c:	00000106 	br	13a4 <__modsi3+0x24>
    13a0:	30000a26 	beq	r6,zero,13cc <__modsi3+0x4c>
    13a4:	294b883a 	add	r5,r5,r5
    13a8:	31bfffc4 	addi	r6,r6,-1
    13ac:	18c7883a 	add	r3,r3,r3
    13b0:	293ffb36 	bltu	r5,r4,13a0 <_gp+0xffff7eb0>
    13b4:	18000526 	beq	r3,zero,13cc <__modsi3+0x4c>
    13b8:	1806d07a 	srli	r3,r3,1
    13bc:	11400136 	bltu	r2,r5,13c4 <__modsi3+0x44>
    13c0:	1145c83a 	sub	r2,r2,r5
    13c4:	280ad07a 	srli	r5,r5,1
    13c8:	183ffb1e 	bne	r3,zero,13b8 <_gp+0xffff7ec8>
    13cc:	38000126 	beq	r7,zero,13d4 <__modsi3+0x54>
    13d0:	0085c83a 	sub	r2,zero,r2
    13d4:	f800283a 	ret
    13d8:	014bc83a 	sub	r5,zero,r5
    13dc:	003fec06 	br	1390 <_gp+0xffff7ea0>
    13e0:	0109c83a 	sub	r4,zero,r4
    13e4:	01c00044 	movi	r7,1
    13e8:	003fe706 	br	1388 <_gp+0xffff7e98>
    13ec:	00c00044 	movi	r3,1
    13f0:	003ff106 	br	13b8 <_gp+0xffff7ec8>

000013f4 <__udivsi3>:
    13f4:	200d883a 	mov	r6,r4
    13f8:	2900152e 	bgeu	r5,r4,1450 <__udivsi3+0x5c>
    13fc:	28001416 	blt	r5,zero,1450 <__udivsi3+0x5c>
    1400:	00800804 	movi	r2,32
    1404:	00c00044 	movi	r3,1
    1408:	00000206 	br	1414 <__udivsi3+0x20>
    140c:	10000e26 	beq	r2,zero,1448 <__udivsi3+0x54>
    1410:	28000516 	blt	r5,zero,1428 <__udivsi3+0x34>
    1414:	294b883a 	add	r5,r5,r5
    1418:	10bfffc4 	addi	r2,r2,-1
    141c:	18c7883a 	add	r3,r3,r3
    1420:	293ffa36 	bltu	r5,r4,140c <_gp+0xffff7f1c>
    1424:	18000826 	beq	r3,zero,1448 <__udivsi3+0x54>
    1428:	0005883a 	mov	r2,zero
    142c:	31400236 	bltu	r6,r5,1438 <__udivsi3+0x44>
    1430:	314dc83a 	sub	r6,r6,r5
    1434:	10c4b03a 	or	r2,r2,r3
    1438:	1806d07a 	srli	r3,r3,1
    143c:	280ad07a 	srli	r5,r5,1
    1440:	183ffa1e 	bne	r3,zero,142c <_gp+0xffff7f3c>
    1444:	f800283a 	ret
    1448:	0005883a 	mov	r2,zero
    144c:	f800283a 	ret
    1450:	00c00044 	movi	r3,1
    1454:	003ff406 	br	1428 <_gp+0xffff7f38>

00001458 <__umodsi3>:
    1458:	2005883a 	mov	r2,r4
    145c:	2900122e 	bgeu	r5,r4,14a8 <__umodsi3+0x50>
    1460:	28001116 	blt	r5,zero,14a8 <__umodsi3+0x50>
    1464:	01800804 	movi	r6,32
    1468:	00c00044 	movi	r3,1
    146c:	00000206 	br	1478 <__umodsi3+0x20>
    1470:	30000c26 	beq	r6,zero,14a4 <__umodsi3+0x4c>
    1474:	28000516 	blt	r5,zero,148c <__umodsi3+0x34>
    1478:	294b883a 	add	r5,r5,r5
    147c:	31bfffc4 	addi	r6,r6,-1
    1480:	18c7883a 	add	r3,r3,r3
    1484:	293ffa36 	bltu	r5,r4,1470 <_gp+0xffff7f80>
    1488:	18000626 	beq	r3,zero,14a4 <__umodsi3+0x4c>
    148c:	1806d07a 	srli	r3,r3,1
    1490:	11400136 	bltu	r2,r5,1498 <__umodsi3+0x40>
    1494:	1145c83a 	sub	r2,r2,r5
    1498:	280ad07a 	srli	r5,r5,1
    149c:	183ffb1e 	bne	r3,zero,148c <_gp+0xffff7f9c>
    14a0:	f800283a 	ret
    14a4:	f800283a 	ret
    14a8:	00c00044 	movi	r3,1
    14ac:	003ff706 	br	148c <_gp+0xffff7f9c>

000014b0 <__mulsi3>:
    14b0:	0005883a 	mov	r2,zero
    14b4:	20000726 	beq	r4,zero,14d4 <__mulsi3+0x24>
    14b8:	20c0004c 	andi	r3,r4,1
    14bc:	2008d07a 	srli	r4,r4,1
    14c0:	18000126 	beq	r3,zero,14c8 <__mulsi3+0x18>
    14c4:	1145883a 	add	r2,r2,r5
    14c8:	294b883a 	add	r5,r5,r5
    14cc:	203ffa1e 	bne	r4,zero,14b8 <_gp+0xffff7fc8>
    14d0:	f800283a 	ret
    14d4:	f800283a 	ret
