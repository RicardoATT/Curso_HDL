# Copyright (C) 2018  Intel Corporation. All rights reserved.
# Your use of Intel Corporation's design tools, logic functions 
# and other software and tools, and its AMPP partner logic 
# functions, and any output files from any of the foregoing 
# (including device programming or simulation files), and any 
# associated documentation or information are expressly subject 
# to the terms and conditions of the Intel Program License 
# Subscription Agreement, the Intel Quartus Prime License Agreement,
# the Intel FPGA IP License Agreement, or other applicable license
# agreement, including, without limitation, that your use is for
# the sole purpose of programming logic devices manufactured by
# Intel and sold by Intel or its authorized distributors.  Please
# refer to the applicable agreement for further details.


# ***************************************************************************
# ***************************************************************************
# 
# File:		C:/Users/ricar/Documents/RATT_repositorios/Curso_HDL/Proyectos/FSM_OneHot/simulation/modelsim/FSM_OneHot_dump_all_vcd_nodes.tcl
# 
# Description:	Script for ModelSim-Altera (Verilog) VCD File Dumping
# 		This script is used to direct ModelSim-Altera (Verilog) to dump
# 		all nodes in the design to a VCD output file
# 
# Usages:	C:/Users/ricar/Documents/RATT_repositorios/Curso_HDL/Proyectos/FSM_OneHot/simulation/modelsim/FSM_OneHot_dump_all_vcd_nodes.tcl
# 
# Generated by:	Quartus Prime
# 		Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition
# 
# Date:		Sat Jun 01 14:31:53 2024
# 
# Design:	FSM_OneHot
# 
# ***************************************************************************
# ***************************************************************************

# ----------------------------------------------------------------
#
proc add_vcd_signals { hierarchy vcd_filename } {
#
# Description:	This function directs ModelSim-Altera (Verilog) to print out the
#		appropriate VCD signals, with the hierarchy level
#		prepended to each signal name
#
# ----------------------------------------------------------------

   catch { vcd add "$hierarchy/S_areg0_q" }
   catch { vcd add "$hierarchy/Y3_aq" }
   catch { vcd add "$hierarchy/Y4_aq" }
   catch { vcd add "$hierarchy/S_a0_combout" }
   catch { vcd add "$hierarchy/Y7_aq" }
   catch { vcd add "$hierarchy/Y8_aq" }
   catch { vcd add "$hierarchy/S_a1_combout" }
   catch { vcd add "$hierarchy/Y2_aq" }
   catch { vcd add "$hierarchy/Y3_a0_combout" }
   catch { vcd add "$hierarchy/Y6_aq" }
   catch { vcd add "$hierarchy/Y7_a0_combout" }
   catch { vcd add "$hierarchy/S_a2_combout" }
   catch { vcd add "$hierarchy/Y1_aq" }
   catch { vcd add "$hierarchy/Y2_a0_combout" }
   catch { vcd add "$hierarchy/Y5_aq" }
   catch { vcd add "$hierarchy/Y6_a0_combout" }
   catch { vcd add "$hierarchy/Y0_aq" }
   catch { vcd add "$hierarchy/Y1_a0_combout" }
   catch { vcd add "$hierarchy/Y1_a1_combout" }
   catch { vcd add "$hierarchy/Y5_a0_combout" }
   catch { vcd add "$hierarchy/Y5_a1_combout" }
   catch { vcd add "$hierarchy/S_aoutput_o" }
   catch { vcd add "$hierarchy/W_ainput_o" }
   catch { vcd add "$hierarchy/CLK_ainput_o" }
   catch { vcd add "$hierarchy/RST_ainput_o" }
   catch { vcd add "$hierarchy/RST_ainputclkctrl_outclk" }
   catch { vcd add "$hierarchy/CLK_ainputclkctrl_outclk" }
   catch { vcd add "$hierarchy/Y4_afeeder_combout" }
   catch { vcd add "$hierarchy/Y0_afeeder_combout" }
}

# ----------------------------------------------------------------
#
proc main { argv } {
#
# Description:	Main entry point to script.  Iterate over all
#		hierarchy levels specified, and direct ModelSim-Altera (Verilog)
#		to print the relevant signals under each level
#
# ----------------------------------------------------------------

   set vcd_filename "FSM_OneHot.vcd"
   set hierarchy "i1"

   vcd file "$vcd_filename"
   vcd on

   add_vcd_signals $hierarchy $vcd_filename
}

main $argv
